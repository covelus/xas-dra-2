/* soapLDAP_USCOREServiceBindingProxy.cpp
   Generated by gSOAP 2.7.9k from ldapws.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapLDAP_USCOREServiceBindingProxy.h"

LDAP_USCOREServiceBindingProxy::LDAP_USCOREServiceBindingProxy()
{	LDAP_USCOREServiceBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

LDAP_USCOREServiceBindingProxy::LDAP_USCOREServiceBindingProxy(soap_mode iomode)
{	LDAP_USCOREServiceBindingProxy_init(iomode, iomode);
}

LDAP_USCOREServiceBindingProxy::LDAP_USCOREServiceBindingProxy(soap_mode imode, soap_mode omode)
{	LDAP_USCOREServiceBindingProxy_init(imode, omode);
}

void LDAP_USCOREServiceBindingProxy::LDAP_USCOREServiceBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "urn:LDAP_Server", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

LDAP_USCOREServiceBindingProxy::~LDAP_USCOREServiceBindingProxy()
{ }

void LDAP_USCOREServiceBindingProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *LDAP_USCOREServiceBindingProxy::soap_fault()
{	return this->fault;
}

const char *LDAP_USCOREServiceBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *LDAP_USCOREServiceBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int LDAP_USCOREServiceBindingProxy::autentificar(std::string login, std::string password, std::string usuario, std::string &success)
{	struct soap *soap = this;
	struct ns2__autentificar soap_tmp_ns2__autentificar;
	struct ns2__autentificarResponse *soap_tmp_ns2__autentificarResponse;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://172.19.32.8/ws/server.php";
	soap_action = "urn:LDAP_Server#ldap_server#autentificar";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__autentificar.login = login;
	soap_tmp_ns2__autentificar.password = password;
	soap_tmp_ns2__autentificar.usuario = usuario;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns2__autentificar(soap, &soap_tmp_ns2__autentificar);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__autentificar(soap, &soap_tmp_ns2__autentificar, "ns2:autentificar", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__autentificar(soap, &soap_tmp_ns2__autentificar, "ns2:autentificar", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_std__string(soap, &success);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns2__autentificarResponse = soap_get_ns2__autentificarResponse(soap, NULL, "ns2:autentificarResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	success = soap_tmp_ns2__autentificarResponse->success;
	return soap_closesock(soap);
}
/* End of client proxy code */
